# LET's MAKE A GAME

You already know enough to make a game: Magic Bird it is.
![my first game](https://doc.aoz.studio/assets/images/en/image081.png)

The object of the game is to make the Magic bird fly by avoiding the stalactites. To play, click on the mouse button (or press on the smartphone screen) which allows Magic to fly away.

Without wasting any more time let's program it. You will find the corresponding code in the Tutorials folder, code that you can copy / paste for the more eager. For others let's learn step by step.

So, without straining yourself, type this line of code (it's a single line):

```basic
Actor "decor", Image$="bg.png", X=0, Y=0, EndX=-1920, LoopMove=True, Duration=20000
```
If you have followed the previous chapters nothing here should surprise you.

By using the Actor instruction we therefore create an actor which is called "decor" a nice name for background, and which uses the image which is called "bg.png". The aforementioned instruction then displays "decor" with the parameters that we provided to it:

â€¢ At the start we place "decor" at the top left of the screen, ie at coordinates X = 0 and Y = 0 and;
â€¢ We tell "decor" to move its top-left corner:
. from position X = 0 (top left of the screen)
. until EndX = -1920 and;
â€¢ To loop (LoopMove = True)
â€¢ With the duration of the movement: Duration = 20000. (note: 20000 milliseconds = 20 seconds for 1 loop)
![scrolling with Actor](https://doc.aoz.studio/assets/images/en/image082.png)
But you probably remember that. We saw that at the start of this user guide.
1. So click the RUN button.
2. See the scenery loop, loop, loop, loop, loop, loop.

To continue, now we need a hero. Who better than Magic?

So we add this new line below the 1st line:
```basic
Actor "decor", Image$="bg.png", X=0, Y=0, EndX=-1920, LoopMove=True, Duration=20000
Actor "magic", Image$ = "magicfly.png"
```
1. Click the RUN button.
2. See the scenery repeat in a loop and watch Magic appear at the top left, which is X = 0, Y = 0. If you do not tell him anything, he takes the default values.

I don't know about you but I don't like to see Magic stuck at the top, so let's modify the code as follows by adding a **Do ... Loop** to move Magic on the vertical Y axis:
```basic
Actor "decor", Image$="bg.png", X=0, Y=0, EndX=-1920, LoopMove=True, Duration=20000
Do
  If Mouse Key = 0 then PY = PY+7 else PY = PY-15
  Actor "magic", Y=PY, Image$="magicfly.png"
  Refresh
Loop
```
Don't panic, I will explain. And before you say anything, know that to do the same thing in a language like JavaScript or C#, you need at least 5 times more lines of code. Let's look at the code:

- The Doâ€¦ Loop allows you to repeat the code inside without stopping. This code inside modifies the variable PY depending on whether or not the mouse button is pressed.

- A quick reminder of the **Ifâ€¦ Then**â€¦ Else statement:

**If** _my test_ **Then** I do this if it's true **Else** I do this if it's false

Example: If 2 = 2 Then Print "true" Else Print "false"

Understood? Let's continue with our game:

- Explanation of: **If Mouse Key = 0 then PY = PY + 7 else PY = PY-15**

If Mouse Key = 0 it means that you have not pressed the Mouse button. In this case PY increases by 7 pixels (PY = PY + 7). On the Y axis when it increases it means that we go down the screen (recall Y = 0 is at the top of the screen).

If Mouse Key is not equal to 0 it means that a mouse button is pressed, then we are in the else: PY goes up by 15 pixels (PY = PY-15) on the Y axis. Indeed, when PY decreases it means that we go up (towards the top of the screen).

The overall result of this line is that Magic goes down by itself by 7 pixels (when you do not press on the mouse) and goes up by 15 pixels if you press the mouse on your computer or the screen of the smartphone.

- Explanation of: **Actor "magic", Y = PY, Image $ = "magicfly.png"**

Okay there you understand, in each iteration of the loop, Magic moves to the new PY coordinates and therefore goes up or down accordingly.

- Explanation of: **Refresh**

Formally Wait Vbl,  this instruction synchronizes the display correctly when it is frequently modified. Strongly recommended in any loop.

1. Click the RUN button.
2. Watch the scenery revolve around and watch Magic move up and down with the mouse pressed. Cool!

Next step, we are going to put obstacles with stalactites which will move from right to left (we speak of horizontal scrolling) and gradually get closer to each other to increase the level of difficulty. Sound good? No? No problem, you can modify all of this, this is just an example.
```basic
Actor "decor", Image$="bg.png", X=0, Y=0, EndX=-1920, LoopMove=True, Duration=20000

For I= 1 to 50
  Actor I, X=400+(I*320), Y=-780+rnd(I*20), Auto$="offsetX=-5", Image$="ice.png"
Next I

Do
  If Mouse Key = 0 then PY = PY+7 else PY = PY-15
  Actor "magic", Y=PY, Image$="magicfly.png"
  Refresh
Loop
```

I'll explain the part I just added.

- A quick reminder of the **Forâ€¦ Next** statement: This is another form of loop but conditional. **For** _variable = start value_ **To** _variable = end value_ **Next** (end of loop)
Example: For I = 1 to 10 : Print I : Next I

- Explanation of: **Actor I, X = 400 + (I * 320), Y = -780 + rnd (I * 20), Auto$ = "offsetX = -5", Image$ = "ice.png"**
In the **Forâ€¦ Next** loop which counts up to 50, by increasing the value of I by 1 at each iteration, we therefore create 50 actors with the names: Actor 1, Actor 2, Actor 3,â€¦ Actor 50.
Note that the actors can have names like "magic" or "lucie" and then we should put **quotes around the names** as they are text, but also can be named by numbers like in this game. It's very practical, like in this example where want to handle 50 actors.

Each of these 50 actors uses the same ice image (ice.png) which includes the upper part and the lower part and which is 2000 pixels high, more than the height of the screen which is 1080 pixels high.
![scrolling with Actor](https://doc.aoz.studio/assets/images/en/image083.png)

To display the stalactites at different heights, we just move their top left corner vertically, so in Y. This is what we do with the parameter **Y = -780 + rnd (I * 20):** We set Y with the value -780 and add a random value which is the product of I * 20.
The rnd (x) function returns a random value between 0 and x. For example rnd (10) returns a value between 0 and 10.
Thus for actor 1 (when I = 1) we will have **a Y = -780 + rnd (1 * 20**), i.e. a value between Y = -780 + 1 = -779 and Y = -780 + 20 = - 760. The more I increases, the stronger the amplitude of Y will be between two stalactites. So the difficulty of the game will increase.

Do the above calculation for I = 50.
![scrolling with Actor](https://doc.aoz.studio/assets/images/en/image085.png)
To display the stalactite's in different positions horizontally we also positioned them in X. This is what we do with the parameter: **X = 400 + (I * 320)**.
We set the X value at 400 plus I * 320.
Thus the more the value of I increases, the more the stalactite is created on the right.
To finish, it suffices to specify for each Actor that the movement is automatic and toward the left (therefore X decreases, and by 5 pixels) with the parameter Auto $ = "offsetX = -5"

And voila, with these parameters which modify the X and the Y in a single line of AOZ we display all our stalactites with randomness and a progression of difficulty.

![I'm Lucie](https://doc.aoz.studio/assets/images/en/image084.png)
Your turn to play ðŸ˜Š:

â€¢ Have fun changing the values â€‹â€‹of the parameters, this is the best way to learn.
â€¢ Understand that there is not only one way to achieve the result, it is the beauty of creation. This is just one suggestion but there are many ways to get there with totally different code.

<BR>
Are you ready, shall we continue?

If not, take your time, read again, modifyâ€¦ Programming must be fun.

Well, something important is missing: collision management. That is, if Magic hits the stalactites or exits the screen it has to... disappear! It's okay, only temporarily.

A little reminder about labels: anywhere in the code you can place a label, and ask the program to go there. For that, the place to go is noted with a name here START: or DEAD: For a label use a name followed by a colon: to differentiate it from a variable or an instruction. And to ask the program to go to this label you have to call the GOTO instruction: GOTO START or GOTO DEAD (without the colon:)

Let's see the completed code of our game and I'll explain it to you.
```basic
START:
Actor "decor", Image$="bg.png", X=0, Y=0, EndX=-1920, LoopMove=True, Duration=20000
For I= 1 to 50
	Actor I, X=400+(I*320), Y=-780+rnd(I*20), Auto$="offsetX=-5",  Image$="ice.png"
Next I

PY=Screen Height/2 // Magic set at the middle of the screen vertically

Do  // Loop start
	If Mouse Key = 0 then PY = PY+7 else PY = PY-15
	Actor "magic",Y=PY, Image$="magicfly.png"
	Refresh
	if Actor Col("magic", image$="ice") = True Then Goto DEAD
	If PY>1000 Then Goto DEAD
	Locate 0,7 : Pen 6: Print score: score=score+1
Loop  // loop end

DEAD:  // If Magic collide that part of code is run
Actor "magic", Image$="Magic_Dead-0.png", Y=PY, ENDY=-20, Auto$="offsetY=-15"
Actor "gameover", X=660, Y=400, Image$="gameover.png"  // display the GameOver banner
Wait click  // Wait for a mouse click (or smartphone touchscreen)
Del Actor "gameover" // delete the GameOver image
Goto START // go at the beginning of the program.
```
There are lots of new and interesting things to explain. It's going to be fine, we're progressing, that's good.

- First of all I added two labels **START:** and **DEAD:** (note the semicolon :) and the **Goto** which corresponds. The last one is **Goto START** simply says: go to that Label (at very beginning of the program where the **START:** is) and so we will start playing again.

- Explanation of:
**if Actor Col ("magic", image$ = "ice") = True Then Goto DEAD**
We have already seen that it is the **Actor Col** function which tests the collisions between the actor "magic" and either another actor or (in our case here) an image which is called "ice". Outcome? As soon as magic touches a stalactite, the function returns that it is True and Then we go to the DEAD label.

Note: the **if** and **image$** are all lowercase and not in the next line. It's cool, in AOZ, we don't have to worry about uppercase or lowercase. Focus on the intelligent part of the coding, not on useless syntax.

- Explanation of:
**If PY> 1000 Then Goto DEAD**
We also go to the DEAD label if magic falls on the ground. The ground is at Y = 1080 pixels (the height of the screen), taking into account the height of magic whose hot spot is at the top left, testing a value > 1000 is sufficient.

OK now, we still have to review the DEAD code and we're done. See it's not that complicated!

- Explanation of:
**Actor "magic", Image$ = "Magic_Dead-0.png", Y = PY, ENDY = -20, Auto $ = "offsetY = -15"**
This will display the image of the ghost of magic, starting from PY, which is the last vertical position of magic and ending the animation at Y = -20 ie, just after the top of the screen. The ghost will therefore rise and disappear at the top of the screen.

- Explanation of: **Wait click**
This instruction, as you might expect, is waiting for a mouse button click.

- Explanation of: **Del Actor "gameover"**
This instruction stops the display of the actor (it disappears), so here we erase the Game over image, then the game is resumed.

Your turn ðŸ˜Š: Modify the code, the valuesâ€¦ but step by step.

---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbNjQ5MDgyMDI3LDcyNTU1NjYwLC0xMTE0ND
QyMzczLDEwOTIzNDIzOTEsLTExNzg5MTc4NjksMTUyODI0Mjk3
NSwtODc2Mjc1NjE2LC0xMzA0MDU0OTI1LC01OTgzMTkxMSwxNT
IxNzA3NzkzLDg3MDIzMjAyNiw3MzA5OTgxMTZdfQ==
-->