# DB
<!--
@name: DB
@description: 
@tags: 
@categories: 
\-->

Switches to DB context. You can immediately execute some DB actions too.

## Description

`DB Context, DB$, Share$, Table$, New, PointOn, Read$, Search$, SearchAll, SearchSql$, Write$, WriteNew$`

If context is set, `DB` switches to the given context:
- First, the current context is saved so you will be able to switch back later
- Then, the wished context date is loaded and selected

The information saved as context are:
- The selected database
- The selected table
- The selected record
- The list of records resulting the last search

The other parameters allow you to immediately execute DB operations.
They are an equivalent to call the matching DB instructions.

- `DB$` and optional `Share$`: Selects the the database. See `DB Database`.
- `Table$`: Selects the table. See `DB Table`.
- `New`: Selects a new record. See `DB New`.
- `PointOn`: Selects a record. See `DB Point On`.
- `Read$`: Reads data from the database current record. See `DB Read`.
- `Search$`: Search records matching the expression. See `DB Search`.
- `SearchAll`: Search all records of the table. See `DB Search All`.
- `SearchSql$`: Search records matching the SQL expression in SQL syntax. See `DB Search Sql`.
- `Sql$`: Executes a native SQL statement. See `DB Sql`.
- `Write$`: Write data to the database current record. See `DB Write`.
- `WriteNew$`: Write data to a new record. See `DB Write New`.

## Parameters

- `Context`: The context number to switch to.
- `DB$`: The name of the database to be selected.
- `Share$`: The database sharing mode.
- `Table$`: The name of the table to be selected.
- `New`: Point on a new record.
- `PointOn`: Selects the record to which apply next `DB Read`, `DB Write` or `DB Delete` instructions.
- `Read$`: The list of the `column=variable` names which values to read, separated by commas.
- `Search$`: Search records matching the expression, most of times a couple of `Column1$=Value, Column2=101` filters.
- `SearchAll`: Search all records of the current table, without any filter.
- `SearchSql$`: Search records matching the matching expression, using a pure SQL syntax.
- `Sql$`: Executes the SQL statement, using a pure SQL syntax.
- `Write$`: The list of the `column=variable` names which values to write into the current record, separated by commas. 
- `WriteNew$`: The list of the `column=variable` names which values to write into a new record, separated by commas.

## Example

This example shows how you can use contexts to read data from two tables in the same loop:

```basic
DB Database "test"
DB 1, Table$ = "address"
DB 2, Table$ = "city"

Name$ = "Paris"  : DB Write New "Name$"
Name$ = "Rennes" : DB Write New "Name$"
Name$ = "Lyon"   : DB Write New "Name$"
Name$ = "Malta"  : DB Write New "Name$"

DB 2, Search$ = "Name$=Paris" : City_Id = DB Pointer()
Name$ = "Baptiste" : DB 1, WriteNew$ = "Name$, City_Id"

DB 2, Search$ ="Name$=Rennes" : City_Id = DB Pointer()
Name$ = "Baptiste" : DB 1, WriteNew$ = "Name$, City_Id"

DB 2, Search$ = "Name$=Paris" : City_Id = DB Pointer()
Name$ = "Laurant" : DB 1, WriteNew$ = "Name$, City_Id"

DB 2, Search$ = "Name$=Malta" : City_Id = DB Pointer()
Name$ = "Francois" : DB 1, WriteNew$ = "Name$, City_Id"

DB 1, Search$ = "Name$=Baptiste"
While DB Pointer()
	DB Read "City_Id" : City_Id = DB Pointer()
	DB 2, PointOn = City_Id, Read$ = "Name$"
	Print "> There is one Baptiste living in "; Name$
	DB 1
	DB Next
Wend
```

This will get the city for each address and display:

> There is one Baptiste living in Paris \
> There is one Baptiste living in Rennes

## Notes

This is an advanced feature&nbsp;: you can use DB features without this DB instruction.
Please make sure you understand the concept of DB context before going further whit this.

---

<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" /></p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbLTE1MDc2OTc2MDYsMTA4ODQ1OTU1OF19
-->
