# MOVE THE ACTOR WITH THE KEYBOARD
Now for even more magic, here you will automatically move your actor with the arrow keys of the keyboard using just one line of code. Clear the previous program and type:
```javascript showLineNumbers
Actor "magician", Image$="magic.png", Control$="Keyboard"
wait // avoid the program to end
```
<table>
	<tr>
		<td width="70%">
			Run that program (RUN) and you'll see the actor move in different directions when you press the four arrow keys of your keyboard
		</td>
		<td>
			<img src="https://doc.aoz.studio/assets/images/en/image019.png" />
		</td>
	</tr>
</table>
*Note: replace Keyboard by Joystick or Mouse to change the Control of the Actor.*

If you're a beginner you'll think this is obvious, but if you're experienced you'll know that normally it would take a complicated program to achieve this. In AOZ  this simple line is enough.

As you can see, to achieve this we have added the **control$** parameter, which as the name suggests determines how to control the actor.  Here, control is with the keyboard property, but you can do exactly the same for a joystick, a mouse or a touch screen.

With AOZ you can make it simple using the default settings, then do what you want by adjusting a few details.

Note: by default the keys used by the Control$="Keyboard" are the **four arrow keys** and the keys **A S** **W and D** on an English QWERTY keyboard **(**and **Q S** **Z and D** on a French AZERTY keyboard).

Now let's do some more specific control. Here's another example:
```javascript showLineNumbers
Actor "magician", Image$="magic.png", Control$="ArrowRight: offsetX = 4; ArrowLeft: offsetX = -4"
wait // avoid the program to end
```
Run the program (RUN). On screen, our actor is static. By pressing the  right and left arrow keys of the keyboard, our  actor moves.  
  
See that we have defined two keys in the Control$:  ArrowRight and ArrowLeft. These properties are unique codes associated with each key on your keyboard (right and left).

Let's break down our program again:
The actor is positioned at coordinates 0,0 which are the default values.

We set the **Control$** parameter value with a string (remember a string of text starts and ends with **"** in AOZ). In that string we assign the values of the two keys (ArrowRight and ArrowLeft). And for each, we have established the values to use for the offsetX, which indicates  the number of horizontal moving pixels for the actor. A negative value has been defined for the Left key in order to move it to the left of the screen.  Reminder:  the top left of the screen is the position 0,0.

To summarize, to assign properties to a key, here's what we do:
"Key code: property1 = xxxx; property2 = yyyy,..."
Example: **"ArrowRight: offsetX = 4; ArrowLeft: offsetX = -4"**

Control names (Keyboard, ArrowRight,‚Ä¶) are separated by a **;**  and each of it's properties are  separated by a **,**

The format is:
&lt;name of the control1&gt; : property1 = value1,property2=value2, property3=value3  ; &lt;name of the control2&gt; : property1 = value1,property2=value2, ‚Ä¶

If you don't understand right away, try to change those values and see what happens.

**It's your move** üòä
- Change the speed of  your actor's movement.  
- Add the properties ArrowUp: offsetY = -4; ArrowDown: offsetY = 4 to move the actor in all 4 directions.
- Reverse the movement: left key to move right, and right key to move left.

**We can always** **make it more complicated‚Ä¶**
Well, to continue our series of making it complicated when we can make it simple, we will now control our actor without using the Control$ parameter. It's possible, here's an example:
```javascript showLineNumbers
PX=0 : PY=0
Actor "magician", Image$="magic.png"
Do
 	If Key State( 37 ) = True Then PX = PX - 4
  	If Key State( 39 ) = True Then PX = PX + 4
  	If Key State( 38 ) = True Then PY = PY - 4
  	If Key State( 40 ) = True Then PY = PY + 4
  	Actor "magician", X = PX, Y = PY
  	Refresh
Refresh
Loop
```
**Run the program**  (RUN)
Using the arrow keys of the keyboard, you'll discover that you can control the movement of the actor very well üòä.

Note: we will see later the value of each keyboard key that we are using here with Key State().

Let's break down our program:
- -Lines 4 to 7-: These four lines allow you to test each of the arrow keys on the keyboard. The function **Key State statement (Key_number)** returns true as if the corresponding key_number is pressed on the keyboard.
If this is the case the code that follows the **then** instruction is executed.
You can, of course, press two keys simultaneously. Left and Top, for example, will move diagonally.
  - Note: When you have the chance, try the little "ScanCode Tester" program that's in the AOZ Studio folder under ‚ÄúAccessories‚Äù, or check the site [https://keycode.info/](https://keycode.info/) to find the Key State codes (or Key Code) of the keys.

- Line 8_: Update our actor by assigning the new values of PX and PY variables to the X and Y parameters. You see that we only update the parameters that change. Remember it's not useful to reuse parameters that do not change, for example: the image ¬´magic.png¬ª.

We've seen how to control our actor by keyboard using **Control$** or **Key State**, but that's just the beginning. We can work wonders with our Actor with all sorts of behavioral instructions, and all is revealed in the chapter called **"Going further with your Actor"**.

---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>

<!--stackedit_data:
eyJoaXN0b3J5IjpbLTc1OTc2MjMzNywtODczMzUxNjY3LC0xNT
kwODg2ODYxLC0xNzU3OTI2OTg4LDE1NTk3MjIwOTEsMTcwODUw
MDQyNiwtMTA3ODkzNzY0OV19
-->