# MORE MAGIC
A little recap before continuing?

You now know how to use:
• **Actor** to:
- display images **Image$**
- position them precisely with **Hotspot$**
- move images by their coordinates with: **X, Y, EndX, EndY**
- animate them automatically with **Auto$**
- choose how to control them with **Control$**

and some of the associated commands (there are many more):
- trigger their movement with **ActionMove$**
- orient them automatically with **LookAt$**
- scroll through them with **LoopMove**

• **Print** to display a message on the screen.

... and you have started to use:

• **If… Then** to define conditions and act accordingly.

• **Do… Loop** to repeat actions.

• **InKey$** to retrieve a key pressed by the user.

Maybe you are wondering, what are the differences between:

- **Inkey$** is a function that returns the next key as a string or an empty string if the keyboard buffer is empty.
- **Key State(n)** is a function that checks if the key with the ID of n is currently pressed, and returns true if it is.

<br>
Not bad for a start! Let|;s continue in this chapter with:

• **Input** to enter text on the user|;s keyboard.

• **Goto** to go to part of your program.

• **If… Then… Else** to master testing conditions… and to initiate actions accordingly.

Let|;s go!

Please erase all your previous code and type:
```basic
Input "Tell me your name";NAME$
Print "Hello ";NAME$
Input "How old are you?";age
days=age*365
Print "Wow! In days that|;s ";days
Print "I think you are old enough to be a Magician!"
Print "Goodbye ";NAME$
Bell 2
```
You basically know all the instructions already. What is new is the **Input** instruction and the **calculation**.

**Input** is a great instruction to ask for something specific, it can be a number or text, for example: **Input NAME$**. Here we combine Input with a Print (it is possible with this instruction), so:

**Input "Tell me your name" ; NAME$**

Will first display the request _Tell me your name_, followed by a question, and what you answer by typing on your keyboard will be stored in the variable NAME$

**Input "How old are you?" ; age**

Another question, and we Input the age. Say you typed in your age as 20, in the memory of the variable age the value 20 is then stored

**days = age*365**

This line will calculate the number of days in our example 20*365, so now in the memory of the variable days we have 7300.

You may have noticed that some variable names finish with a $ , like NAME$, but some variable names don’t, like age. There|;s a reason for this, and our tutorials will teach us how to create different types of variables and why. For now just note that when you set a variable with text you should add a $ at the end of its name, but if it is a value then there is no $. It|;s that simple.

We already know that a computer program is nothing more than a bunch of instructions that tell your machine what to do. If a computer only obeyed your list of instructions one after the other, your programs would be very limited and very boring. So we already know that the magic only begins when you teach your machine to start making decisions. These decisions are all based on simple conditions.

**DECISIONS**
The quick way to get a computer to make a decision is to teach it something and offer it a choice of what to do, depending on what it knows. If computers understood plain English we would say something like, "Hey computer, look out the window. If it|;s daytime then let|;s go to the gym. But if it|;s not daytime then let|;s go to bed." When you ask AOZ to give this sort of choice to your computer, it will look at the choices on offer and decide if the condition is true or false. If it|;s true then your computer decides to take one course of action, but if it|;s false then another course of action will be taken.

One course of action could be to jump to a new place somewhere in your list of instructions using, for example, what is called a PROCEDURE. But there are other solutions on offer.

One is to mark the place you want to jump to in the code before telling your computer|;s brain to jump to it and carry out whatever instruction is waiting there. With AOZ this is dead easy. You simply mark the place in your list of commands by giving it a name or a label, and tack on a colon character so your computer can recognize it and not confuse it with anything else. You can use any letter or number characters you like for this label, including the "underscore" _ character. So an example of your label could be **THE_GYM:** or **thegym:** or **THEGYM:**

By using labels like this, you can now go to anywhere you like in your program using a special Goto command.  The following example includes THEGYM label,  the new command Goto, and the Wait command with every second you want the computer to wait. Normally you would have to wait 10 seconds to find out what time it is, but you can tell the computer to jump over that wait and go straight to the gym.
```basic
Print "I wonder what the time is"
Goto THEGYM
Wait 10
Print "bed time?"
THEGYM:
Print "It must be daytime!"
End
```
**LOGIC**
It|;s time to let your computer begin to think for itself using simple logic, and make a decision without any help from you. To do this you can use two commands that have the same meaning in the AOZ language as they do in the English language. These commands are If and Then. We told you we were going to see them again 😊.

So **If**  something is true **Then**  the computer will decide to take one action, otherwise it will do something **Else**.

Run this little routine and watch the computer decide what time it is:
```javascript showLineNumbersbasic
NIGHT=1
NOW=1
Print "What time is it now?"
Wait 3
If NOW = NIGHT then Goto BED
If NOW <> NIGHT then Goto SOCCER
BED:
Print "I think it is bed time"
End
SOCCER:
Print "Where is the ball?"
```
Now change the value of NIGHT to another number, like NIGHT=0, and RUN that routine again.

If you are sure you understand how your computer reaches its decision Then _Goto_  the next paragraph, or _Else_ try again.

AOZ also uses the word **Else** when telling your computer how to decide if something is true or false, so you could change that last routine to something like this below, then change the values of NIGHT to see what happens:
```basic
NIGHT=0
NOW=1
Print "What time is it now?"
Wait 3
If NOW = NIGHT then Goto BED else Goto SOCCER
BED:
Print "I think it is bed time"
End
SOCCER:
Print "Where is the ball?"
```
--------------------------------------------------------

<br> 
How about you create some more magic by writing a simple computer game to test out what you|;ve learned so far? It|;s a genuine game of logic and the computer responds to anything that you throw at it. To do this you will have to use these mathematical symbols.
"=" means "is equal to"
"<>" means “is different than”
">" means "is greater than"
"<" means "is less than"

This is a game of Guess The Secret Number. We are going to use a new command to clear the screen, otherwise the number won|;t be secret at all. The instruction to clear your screen is **Cls**.

One more thing, you already know **If...Then...Else**, but there is a different way of using the **If** without the **Then**.

Here we use **If** several times, and you have to type **End If** the appropriate number of times at the end of your logic tests, otherwise your computer will be left wondering what to do for ever.

OK, when you are ready, type in this game and go and find a victim to inflict it upon.
```basic
Print "Let|;s play Guess The Secret Number"
Print " Ask your victim to shut their eyes"
Wait 2
Input "Now type a secret number between 1 and 10 ";A
Cls
Print "Ask your victim to open their eyes"
Wait 2
SECRET:
Input "Victim, find the secret number ";B
If B=A
 	Print "YES. CONGRATULATIONS!"
Else
	If B<A
			Print "WRONG! Go higher" : Goto SECRET
  	Else
			If B>A
  	    	Print "WRONG! Try lower" : Goto SECRET
	       	End If
 	End if
 End If
```
Do you see the : this separates instructions on a line. You can write the same thing like this:
```basic
If B<A
		Print "WRONG! Go higher"
 		Goto SECRET
Else
 		If B>A
  		Print "WRONG! Try lower"
    	Goto SECRET
 		End If
End If
```
Optimization is important in programming. Let|;s change the SECRET: procedure part of the code, and try to understand why it still works. Once you understand then you’re the Master of the Ifs!
```basic
SECRET:
Input "Victim, find the secret number ";B
If B=A
 		Print "YES. CONGRATULATIONS!"
Else
	If B<A
		Print "WRONG! Go higher" : Goto SECRET
 	Else
 	    Print "WRONG! Try lower" : Goto SECRET
 	End if
End If
```
Now let’s try to achieve the same result using the previous more traditional **If...Then...Else** :
```basic
SECRET:
Input "Victim, find the secret number ";B
If B=A then Print "YES. CONGRATULATIONS!" : End
If B<A Then Print "WRONG! Go higher" else Print "WRONG! Try lower"
Goto SECRET
```
**If** you do not understand **Then** we have failed **Else** you are brilliant.
<BR>

---

<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbMzc5OTIyNjEwLC0xMzE5MDg4MzAyLC0xNT
k3NjU0MzEwLC0xMzgzNDI2MzIsLTE5MTE5NjkzODEsLTIzNjg2
OTUwMywtNzY3OTUzMzM4LC01NTI5ODkwMDZdfQ==
-->