# TOTE BAG

And yes, we need a catch-all chapter to put in it what we couldn't put away elsewhere, here are some fun little things to try.
Do not say I am lazy, we already wrote 250 pages of documentation, ok call this chapter Miscellaneous.

## Making a new Font

**Set Bitmap Font** \<font number>, \<  character width>, \<character height>, \<image number to use>, \<scale X>, \<scale Y>

**Bitmap Text** \<text>, \<X position>, \<Y position>, \<font number>, \<font style>
Example :
```basic
Load Asset "font.png", 1 // using image below
Set Bitmap Font 1, 8, 8, 1, 5.0, 5.0
Bitmap Text "Hello World!", 100, 100, 1, 1
Wait Key
```
![aoz font](https://doc.aoz.studio/assets/images/en/image202.png)

Note : you also can use the Text feature of Actor to display graphical fonts.

## Print graphical texts

**Centre Text Text\$**
Works like Print, but for graphical text
Centre Text Text$, how
- how is indicating how to center text (here the values are given in binary but you can use any other base):
None:  %0000 = no centering
Bit 0: %0001 = Horizontal
Bit 1: %0010 = Vertical
Both: %0011 = Horizontal and Vertical

Example:
```basic
#googleFont: "Baloo"
Set Font "Baloo",60 ' 60 pixels high
horz=1
vert=2
both=3

Gr Locate 0,100 ' Set y pos at 100px
Centre Text "Center horizontally at y=100." ' Centers horizontally at current y pos
Wait Key : Cls

Gr Locate 0,200 ' Set y pos at 200px
Centre Text "Center horizontally at y=200.",horz ' Same as above.
Wait Key : Cls

Gr Locate 100,0 ' Set x pos at 100px
Centre Text "Center vertically at x=100.",vert ' Centers vertically at current x pos
Wait Key : Cls

Gr Locate 200,0 ' Set x pos at 200px
Centre Text "At center of screen.",both ' At center of page.
Wait Key : Cls
```
<BR>

**Text**
Works like Print with no parameters, but for graphical text.
Example:
```basic
#googleFont: "Baloo"
Set Font "Baloo",60 ' 60 pixels high

Text 0,60,"Text (normally all text in a line):" : Text
Text ,,"This is a test."
Text ,,"This is too."
Wait Key : Cls
Text 0,60,"Text (using Text, like CR LF):" : Text
Text ,,"This is a test." : Text
Text ,,"This is too."
```
<BR>

**Text Height**
A function that returns the current graphical font height.
Example:
#googleFont: "Baloo"
Set Font "Baloo",60 ' 60 pixels high
<BR>

**Print Text Height**
The new fancy styles apply to **Print** can be used by using the On/Off Commands, including:
Outline On : Print "Outlined" : Outline Off
Shade On : Print "Shaded" : Shade Off
etc.

You can also use Set Print to set multiple styles at the same time.

Dec  Hex Binary
---  --- ---------
Normal  =  0' $00 %00000000
Underline  =  1 $01 %00000001
Bold  =  2 $02 %00000010
Italic  =  4 $04 %00000100
Shade  =  8 $08 %00001000
Inverse  =  16 $10 %00010000
Shadow  =  32 $20 %00100000
Outline  =  64 $40 %01000000
Future  = 128 $80 %10000000 (future flash)

So we can do this:
```basic
Bold=2 : Underline = 1 : Shadow = 32 : Italic = 4
Set Print Bold+Underline+Shadow+Italic
Print "Bold+Underline+Italic+Shadow"
```
<BR>


## HTML and AOZ

Note : Work in progress chapter.

You can load HTML templates directly with Load Asset, and manipulate the HTML content with AOZ using :

**Load Asset** "home.html", "home" and **Show HTML** "home"

One of the advantages of this is that you can feed your HTML templates with the values of your AOZ variables.

Example:
```basic
home.html
\<h1>Bienvenue, %FIRSTNAME$%\</h1>

main.aoz
Load "home.html", "home"
FIRSTNAME$ = "Bobby"
Show HTML "home"
```
With %FIRSTNAME$% will be replaced by "Bobby"
<BR>

You can also insert the content of an HTML template, in another HTML template.
Example :
```basic
home.html
<h3>Contacts</h3>
<div id="contacts_list"></div>

list.html
<ul>%LIST$%</ul>

main.aoz
Load Asset "home.html", "home"
Load Asset "contacts.html", "contacts"
Dim contact$( 5 )
contact$(1) = "Fran√ßois"
contact$(2) = "Laurant"
contact$(3) = "Baptiste"
contact$(4) = "Salome"
contact$(5) = "Brian"
LIST$ = ""

For R = 1 To 5
	LIST$= LIST$ + "<li>" + contact$(R) + "</li>"
Next R

Show HTML "home"
HTML Element "contacts_list", Content$ = HTML
Code$(contacts)
```
With HTML Code$( template_name ) returns the HTML of the template replacing the %TAG% by the values of the AOZ variables


---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbNTAxOTcxMjM2LC03MjMxNDI2NDMsMTA5Mj
M0MjM5MSwtMTE3ODkxNzg2OSwxNTI4MjQyOTc1LC04NzYyNzU2
MTYsLTEzMDQwNTQ5MjUsLTU5ODMxOTExLDE1MjE3MDc3OTMsOD
cwMjMyMDI2LDczMDk5ODExNl19
-->