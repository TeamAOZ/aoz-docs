# PAUSE, DO...LOOP, IF...THEN
Here are some other important concepts for a programmer.

By default the actor movement starts automatically, but in some cases you will need to control it. For example, to pause it when you want. So let's update our code :
```javascript showLineNumbers
1  Actor "magician", X=10, Y=0, Image$="magic.png", EndX=1980  
2  Do
3  Do
	A$ = Inkey$  
4	If A$ = "t" Then Actor "magician", ActionMove$="pause"  
5	If A$ = "y" Then Actor "magician", ActionMove$="play"
6  Loop
```
Run the program (RUN), and our actor will be displayed on the screen and move. Now quickly press the **t** key on your keyboard, and the movement will pause. Next press on the **y** bar, and the move will continue. Do it again, press **t** to pause then **y** to continue. Then press‚Ä¶ Now stop!

But at AOZ Studio we are very kind with computers and magicians, so it's possible to stop a program by pressing the **Ctrl** and **c**  keys simultaneously (the Ctrl keys are located at the bottom left and right of your keyboard).

Let's break the program down.

- _Lines 2 and 6_: the  **Do ... Loop**. This is an important new concept. It's a two-part instruction to indicate that the parts between the Do and the Loop is to be repeated in a loop. In other words the loop is a part of code that gets repeated forever until the program, or the use Ctrl plus c, decides to end the madness.

- _Line 4 and 5_: a new parameter is set for the Actor:  **ActionMove$**. This allows you to affect the actor's  movement. There are two possible states: **"play"**, which is the default value, and **"pause"**, which interrupts the move.

- _Line 3_: the variable **A&dollar;** stores the value of the pressed key, returned by **Inkey&dollar;**

Note: If no key is pressed, **Inkey&dollar;**  returns an empty value or ‚Äú‚Äù.  If the key is the space bar the **Inkey&dollar;** function returns a space or  " " (Note that there is a space between the 2 quotation marks).

**Inkey&dollar;** will return "t" or "T" if  the keyboard is capitalized, but only the lower-case t will be recognized here.

Now let's look in detail at a very important instruction composed of three words, of which only the word **If** is mandatory. Introducing the famous and indispensable **IF... THEN... ELSE:**

- **if A&dollar;** contains the letter "t" it's because the key has been pressed, **then** the **ActionMove$** of the **Actor** instruction is set with the **"pause"** property which stops the animation.

- **if** **A&dollar;** contains a "y" then we change the **ActionMove$** of the **Actor** instruction with the **"play"**  property which relaunches the animation.

We have now covered two very important instructions: the **Do‚Ä¶loop** and the **If... Then... Else**.

If you don't understand it all, no worries. We'll review this in more detail later, but we suggest that you have a go at modifying this program to understand it for yourself.

It's your move üòä
- Change which letters of the keyboard pause and play.

As you can see with AOZ it is very easy to move actors on the screen and control them. If we have several dozen actors, the Actor instruction provides the parameters to make it easy to manage them.

Come on then, let's keep going and try something more complicated. Change the program as follows:
```javascript showLineNumbers
Actor "magician", Y=100, Image$="magic.png"
PX=0
Do
	PX = PX + 16
	Actor "magician", X = PX
	Refresh
Loop
```
Run the program (RUN). The actor gradually moves from the left to the right of the screen.

I know what you're thinking. You're thinking that code achieves the same result as when we used the simple line:
```javascript showLineNumbers
Actor "magician", Image$="magic.png", Y=100, EndX=1980  
```
So why make it complicated when you can make it simple?

Because it's important to understand what's going on behind an instruction, in terms of the value of a parameter.
The use of a powerful command such as Actor should not let you ignore the mechanics that allow it to produce its effects.

Let's break down our program once more:
- _Line 1_: Our actor is positioned on the screen (at coordinates 0,100).

- _Line 3 and 7_: The Do ... Loop,  you recall,  indicates that we repeat the code between the Do and the Loop continuously.
- _Line 4_: The PX variable value when the program reaches Line 3. First is equal to 0 (value by default). This line will add 16 to PX which will then be worth 16 (new PX = 0 + 16).
- _Line 5_: We call the **Actor** instruction to update the X setting with the value of the PX variable, now X will be worth 16.
Note: As we have already defined the value of Y and the Image in Line 1, there is no need to redefine them here, so we keep the same values (Y=100).
- _Line 6_: Refresh (or Wait Vbl) is a small instruction we need to smooth the animation, synchronizing it with your screen. We will explain later in a dedicated Chapter (Speed and Refresh)
- _Line 7_: The Do... Loop ends with Loop indicating that we are closing the loop and returning to the beginning of it (i.e. line 2) to run the same code again.

In summary, this loop adds 16 to the variable PX each time. Thus our actor will advance by 16 pixels in X (horizontally), without changing Y (vertically) in each pass of the loop.

**It's your move** üòä

- Move magician slower and faster by changing PX = PX + 16
- Move magician diagonally
- Move in all directions with 4 keys using **Inkey$**
---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>


<!--stackedit_data:
eyJoaXN0b3J5IjpbLTE0MzAyNTIwNDEsMjA1NTg1MTI3OF19
-->