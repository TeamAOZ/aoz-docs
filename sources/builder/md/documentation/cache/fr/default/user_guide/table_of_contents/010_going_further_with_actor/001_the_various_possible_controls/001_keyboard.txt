# KEYBOARD
Example: **Control$="ArrowLeft: angle=4"**. Here, by pressing the left key the actor will rotate by four degrees.

Here's how to sum up the **Control$**'s properties:

- **offsetX**: value for the horizontal movement of the actor.
- **offsetY**: value for the vertical movement of the actor.
- **angle**: value for the rotation of the actor.
- **hrev**: true/false. Whether or not the horizontal flipping (mirror effect) of the actor is activated.
- **vrev**:  true/false. Whether or not the actor's vertical flipping (mirror effect) is activated.
- **Image:** image to be used for the actor when pressing this key on the keyboard.
- **anim**: Name of the animation to play for the actor when pressing this key. The Actor's **Actorsheet$** parameter must be set. Note: there is **Actor Animation** for easy animations.
- **forward:** numerical value for moving forward. The movement takes place according to the actor's angle of rotation.
- **backward:** a numerical value for moving backward. The movement is done at the actor's opposite angle of rotation.

Example:
```basic
Actor "magic", X=Screen Width/2, Y=Screen Height/2, Image$="magic.png", Control$ ="ArrowUp: angle=-8; ArrowDown: angle=8; ArrowRight: forward=10; ArrowLeft: backward=10"
Actor "lucie", X=Screen Width/2, Y=Screen Height-230, Image$="lucie.png", Control$="ArrowRight: OffsetX=16; ArrowLeft: OffsetX=-16"
```
**Your turn** ðŸ˜Š :
- Replace the backward property by forward but still moving backward (think minus)
- Try the different Control$ parameters

---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/en/image001.png" />
</p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbMTMxNTg2MjM5MywyMTAzNTU0MjAsNzMwOT
k4MTE2XX0=
-->