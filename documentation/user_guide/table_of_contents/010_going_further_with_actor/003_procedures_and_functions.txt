# PROCEDURES AND FUNCTIONS
Procedures allow programs to be divided into independent and reusable parts. I strongly advise you to use them and thus organize your program into parts; you will quickly appreciate its usefulness.

A common question is the difference between a Procedure and a Function?
Originally in BASIC (the core language of AOZ) a Function had a return value, while a Procedure did not. To call a Procedure, all you have to do is invoke the name of the procedure, and to call a function you define a variable that will contain the result of the Function. In AOZ we added the possibility for Procedures to also return a value, like a function.

The difference between the two now boils down to:
- A Function can be added to the language via an extension.
- A Procedure which has no return value can be invoked simply by its name, or by Proc followed by the name.

Example : 
```basic
1  Print MyProc[2,3]
2  Print MyFunc(2,3)
3  ProcOnly[2,3]
4  Proc ProcOnly[2,3]
5  End
6  
7  Procedure MyProc[a,b]
8  End Procedure[a*b]
9  
10 Function "MyFunc",a,b
11 End Function(a*b)
12
13 Procedure ProcOnly[a,b]
14    Print "Pas de valeur de retour"
15 End Procedure
```
You can also make your own functions the same way. Here's a working example:
```basic
1  Function "Triple$",p2$
2    myResult$ = Repeat$(p2$,3)
3  End Function (myResult$)
4
5  Print Triple$("MyStr "),Triple$("<<<")
```

This function return 3 times the text sent as the parameter: Triple$(parameter), it is trivial but you can have very complex code in a function if you need it!

Note: another way to divide your program in different parts is to use **INCLUDE**, which we will discuss later.

---
<p align="center"><img valign="middle" width="76px" src="https://doc.aoz.studio/assets/images/image001.png" />
</p>
<!--stackedit_data:
eyJoaXN0b3J5IjpbLTExNTk0OTMyNDYsODcwMjMyMDI2LDczMD
k5ODExNl19
-->